to update-weather
  
  ifelse GISP2_trend = true [ 
    let ch4_value 400
    ifelse ticks < 240 [
      set ch4_value item year GISP2_climate_trend
    ] 
    [
      set ch4_value item (length GISP2_climate_trend - 1) GISP2_climate_trend
    ]
    let ch4_normalized_value (ch4_value - 400) / (800 - 100)
    let temperature_from_ch4 (ch4_normalized_value * 20) - 5
    
    ask land_patches [ 
      set temp_current (ifelse-value
        current_season = 0 [ (random-normal temp_jja (sd_temp_jja + sd_temp_change) + temperature_from_ch4) / 2] 
        current_season = 1 [ (random-normal temp_son (sd_temp_son + sd_temp_change) + temperature_from_ch4) / 2 ]
        current_season = 2 [ (random-normal temp_djf (sd_temp_djf + sd_temp_change) + temperature_from_ch4) / 2 ]
        current_season = 3 [ (random-normal temp_mam (sd_temp_mam + sd_temp_change) + temperature_from_ch4) / 2 ])
    ]
  ] 
  
  [
    if ticks < environment_delay [ 
      set temp_change min list max_temp_change (temp_change + max_temp_change / environment_delay)
      set prec_change min list max_prec_change (prec_change + max_prec_change / environment_delay) 
    ]
    
    if ticks < variation_delay [ 
      set sd_temp_change min list increase_temp_variation (sd_temp_change + increase_temp_variation / variation_delay)
      set sd_prec_change min list increase_temp_variation (sd_prec_change + increase_prec_variation / variation_delay)
    ]
    
    
    ask land_patches [ 
      set temp_current (ifelse-value
        current_season = 0 [ random-normal temp_jja (sd_temp_jja + sd_temp_change) + temp_change ] 
        current_season = 1 [ random-normal temp_son (sd_temp_son + sd_temp_change) + temp_change ]
        current_season = 2 [ random-normal temp_djf (sd_temp_djf + sd_temp_change) + temp_change ]
        current_season = 3 [ random-normal temp_mam (sd_temp_mam + sd_temp_change) + temp_change ])
    ]
  ]
    ask land_patches[
      set prec_current (ifelse-value
        current_season = 0 [ max (list 0 random-normal prec_jja (sd_prec_jja + sd_prec_change)) + prec_change ]
        current_season = 1 [ max (list 0 random-normal prec_son (sd_prec_son + sd_prec_change)) + prec_change ]
        current_season = 2 [ max (list 0 random-normal prec_djf (sd_prec_djf + sd_prec_change)) + prec_change ]
        current_season = 3 [ max (list 0 random-normal prec_mam (sd_prec_mam + sd_prec_change)) + prec_change ]) 
    ]

end

to update-food-and-resources
  ask land_patches [
    ; food return is based on the moving average of temperature and precipitation! It does not take into account the harvesting of the hunter-gatherers on the patch // TO DO
    ; take the temperature of the last season and add it to the list to calculate the new average
    set temp_year (ifelse-value
      current_season = 0 [ replace-item 0 temp_year temp_current ]
      current_season = 1 [ replace-item 1 temp_year temp_current ]
      current_season = 2 [ replace-item 2 temp_year temp_current ]
      current_season = 3 [ replace-item 3 temp_year temp_current ])
  
      set prec_year (ifelse-value
      current_season = 0 [ replace-item 0 prec_year prec_current ]
      current_season = 1 [ replace-item 1 prec_year prec_current ]
      current_season = 2 [ replace-item 2 prec_year prec_current ]
      current_season = 3 [ replace-item 3 prec_year prec_current ])
    
    set average_temp mean temp_year
    set average_prec mean prec_year
    
    ifelse abs (average_temp - optimal_temperature) > max_deviation_temp or abs (average_prec - optimal_precipitation) > max_deviation_prec or volcano_impact? = true  [
      set food_available 0
      set resources_available 0
    ] [
      ;min-max feature scaling
      set temp_deviation 0 
      ifelse average_temp <= optimal_temperature [
        set temp_deviation (1 - (average_temp - optimal_temperature) / (min_temperature - optimal_temperature))
      ] [ ;     if average_temp > optimal_temperature[
        set temp_deviation (1 - (average_temp - optimal_temperature) / (max_temperature - optimal_temperature))
      ]
      
      ;min-max feature scaling
      ifelse average_prec <= optimal_precipitation[
        set prec_deviation (1 - (average_prec - optimal_precipitation) / (min_precipitation - optimal_precipitation))
      ] [ ;     if average_prec > optimal_precipitation[
        set prec_deviation (1 - (average_prec - optimal_precipitation) / (max_precipitation - optimal_precipitation))
      ]

      
      ifelse altitude > max_altitude_food_available [
        set food_available 0 ] [
        set food_available min list (((temp_deviation + prec_deviation) / 2) * max_food) (food_available + max list 0 (((temp_deviation + prec_deviation) / 2) * max_food) / growback_rate) ]
      
      set resources_available min list (((temp_deviation + prec_deviation) / 2) * max_resources) (resources_available + max list 0 (((temp_deviation + prec_deviation) / 2) * max_resources) / growback_rate)
    ]
  ]
end

to update_bands_variables
  ;new season means the bands have all available time to move, gather and explore
  
  ask bands [
    set time_spent 0
    set time_spent_exploring 0
    set time_spent_moving 0
    set time_spent_gathering 0
    
    let group_size_influence mobility_size_factor * (1 - (group_size / merge_max_size))
    ;mobility is dependent on group_size
    set mobility max list 1 (initial_mobility * group_size_influence)
    
    set food_needed group_size * 90
    set resources_needed (group_size * 30) - resources_owned
    if resources_needed < 0[
      set resources_needed 0
    ]
    
    ;Mutation of the cultural capital - normal distribution
      set cultural_capital max list 1 min list 100 random-normal cultural_capital cultural_capital_mutation
    
    ;    if not any? my-links [
    ;      set cultural_capital max list 1 min list 100 (cultural_capital - 1) ] 
    
    ;as the season has changed, the bands change their knowledge about the patches to the current season
    if current_season = 0[
      set known_locations_current known_locations_summer
    ]
    if current_season = 1[
      set known_locations_current known_locations_fall
    ]
    if current_season = 2[
      set known_locations_current known_locations_winter
    ]
    if current_season = 3[
      set known_locations_current known_locations_spring
    ]
  ]
  
end