to interact-with-other-bands
  ;Make sure that links do not get updated by both of the ends (turtles)
  ask links [
    set updated? False
    if ticks mod 4 = 0[
      set strength_of_connection strength_of_connection - 1
    ]
    if strength_of_connection < 1[
      die
    ]
  ]
  
  ask bands [
    ;define the current turtle who is asked to interact
    let current_band self

    ;put all the turtles on the same or a neighbouring patch in a turtleset
    let neighbor_bands (turtle-set bands-on neighbors bands-here)
    ask neighbor_bands[

      ;if there is no link between the neighbouring bands yet...
      if not member? current_band in-link-neighbors and current_band != self[

        ;create a link between the bands
        create-link-with current_band[
          set strength_of_connection 0
          set updated? False
          set color red
          if show_links = False[
            set hidden? True
          ]
        ]
      ]
      ;make sure turtles don't see themselves as neighbours
      if current_band != self[
        ;make existing connections between neighbouring turtles stronger
        let current_link one-of my-links with [end1 = current_band or end2 = current_band]
        if [updated?] of current_link = False[
          ask current_link[
            ;increase the strength of the current link as the groups have been close to each other for another tick
            set strength_of_connection strength_of_connection + 1
            set updated? True
          ]


          if [strength_of_connection] of current_link > second_threshold_connection[
            update_location_knowledge known_locations_summer current_band
            update_location_knowledge known_locations_fall current_band
          ]
          if [strength_of_connection] of current_link > first_threshold_connection[
            update_location_knowledge known_locations_winter current_band
            update_location_knowledge known_locations_spring current_band
            set technology_level technology_level + 1  ;also share knowledge about technologies from the first threshold on
          ]
          ;Share knowledge based on the strength of the connection: Spring, Winter, Fall, Summer
          if [strength_of_connection] of current_link > fourth_threshold_connection[
            merge current_band
          ]
        ]
      ]
    ]

  ]
end

to merge [current_band]
  if group_size + [group_size] of current_band <= merge_max_size and [food_available] of patch-here >= 90 * group_size + [group_size] of current_band[
    ask current_band[
      set group_size group_size + [group_size] of myself
      set resources_owned resources_owned + [resources_owned] of myself
    ]
    die
  ]
end

to update_location_knowledge [known_locations_given_season current_band]
  ;Function that shares knowledge between bands (will happen twice per link as both agents have to update their knowledge)

  let temporary_list_of_known_locations [known_locations_given_season] of current_band

  let x 0
  ;First delete all the other bands knowledge which the band has already (own information > foreign information)
  while [x < length known_locations_given_season][
    let current_location item x known_locations_given_season
    set temporary_list_of_known_locations filter [y -> item 0 y != item 0 current_location] temporary_list_of_known_locations
    set x x + 1
  ]
  ;Add all remaining knowledge of patches to complete the list of known locations (add linked bands known locations)
  foreach temporary_list_of_known_locations[y -> if length y = 3
    [set known_locations_given_season lput y known_locations_given_season]
  ]
end

to gather_move_explore
  ;General function that creates the flow for the bands
  foreach sort-on [group_size] bands
  [ one_of_bands -> ask one_of_bands [
    ;if there is no need to move, they won't, if there is a need, choose the closest location that has the needed food/resources
    ifelse ([food_available] of patch-here <= food_needed) or ([resources_available] of patch-here <= resources_needed)
    [
      let potential_new_locations []
      ;Find patches with enough food and resources, but exlude patches that are too far away from the current position
      ;The cost to move to a new patch is built up from the distance to that patch, the ruggedness_index of the patch and the relative altitude of the patch
      ;The underlying relationship between resources_available on a patch and the ease with which the patch is crosses can be seen in the ruggedness_index. If a patch is rugged, there isn't much food and the other way around.
      foreach known_locations_current [x -> if (item 1 x >= food_needed and item 2 x >= resources_needed and ([distance self] of item 0 x + ([ruggedness_index] of item 0 x / 10) + abs (([altitude] of item 0 x - [altitude] of current_home_location) / 100) - mobility) < max_move_time)
        [set potential_new_locations lput (item 0 x) potential_new_locations]
      ]
      set potential_new_locations patch-set potential_new_locations
      if any? potential_new_locations[
        ;chose the patch that is closest to my current position
        let new_home min-one-of potential_new_locations [distance self]
        if new_home != current_home_location [
          move new_home ]

      ]
      ;If there is no location available that has enough food AND resources, explore to find a patch that has enough
      if not any? potential_new_locations[
        explore
      ]

    ]
    [
      ;delete current knowledge on this patch in the current season
      set known_locations_current filter [x -> item 0 x != patch-here] known_locations_current
      ;add the new knowledge on this patch in the current season
      set known_locations_current lput (list patch-here [food_available] of patch-here [resources_available] of patch-here) known_locations_current
    ]

    gather
    ;At the end of a season, the knowledge should be updated about the season that has just passed
    if current_season = 0[
      set known_locations_summer known_locations_current
    ]
    if current_season = 1[
      set known_locations_fall known_locations_current
    ]
    if current_season = 2[
      set known_locations_winter known_locations_current
    ]
    if current_season = 3[
      set known_locations_spring known_locations_current
    ]
  ] ]
end

to gather
  ;Calculate the time left after exploring and moving
  ; let time_left max list 0 (time_available - time_spent)
  let time_left (time_available - time_spent)
  ;print sentence "time_available: " time_available
  ;print sentence "time_spent: " time_spent

  set time_spent_gathering time_left
  ;Decide how much time is needed to gather food and resources
  let time_needed_for_food 90 / effectiveness
  let time_needed_for_resources 30 / effectiveness

  let part_spent_food time_left * (time_needed_for_food / (time_needed_for_food + time_needed_for_resources))
  ;print sentence "part spent food: "part_spent_food
  ;print sentence "time_left:" time_left
  ;print sentence "technology_level" technology_level
  ;print sentence "food_needed" food_needed
  ;print sentence "time_needed_food:" time_needed_for_food
  ;print sentence "time_needed-resources:" time_needed_for_resources

  let part_spent_resources time_left - part_spent_food

  if part_spent_food > time_needed_for_food[
    set part_spent_food time_needed_for_food
  ]

  if part_spent_resources > time_needed_for_resources[
    set part_spent_resources time_needed_for_resources
  ]


  ;Find out how much food and resources the band could gather if available
  let potential_food part_spent_food * group_size * effectiveness
  ;print sentence "potential_food: " potential_food

  let potential_resources part_spent_resources * group_size * effectiveness


  ;Gather food
  ifelse potential_food > [food_available] of current_home_location [
    set food_owned round food_available

    ask current_home_location[
      set food_available 0
    ]
  ]
  [
    set food_owned round potential_food
    ;print sentence "food_owned: " food_owned
    ;print ""

    ask current_home_location[
      set food_available round (food_available - potential_food)
    ]
  ]

  ;Gather resources
  ifelse potential_resources > [resources_available] of current_home_location[
    set resources_owned resources_owned + resources_available
    ask current_home_location[
      set resources_available 0
    ]
  ]
  [
    set resources_owned resources_owned + potential_resources
    ask current_home_location[
      set resources_available resources_available - potential_resources
    ]
    ;Spending the spare time if there is any on gathering additional resources
    let spare_time time_left - time_needed_for_food - time_needed_for_resources
    let potential_extra_resources min list (group_size * 30)(group_size * effectiveness * spare_time)

    ifelse potential_extra_resources > [resources_available] of current_home_location[
      let resources_gathered min list (group_size * 30) ([resources_available] of current_home_location)
      set resources_owned resources_owned + resources_gathered
      ask current_home_location[
        set resources_available max list 0 (resources_available - resources_gathered)
      ]
    ]
    [
      set resources_owned resources_owned + potential_extra_resources
      ask current_home_location[
        set resources_available resources_available - potential_extra_resources
      ]

    ]
  ]
end

to move [new_home]
  ;Calculate time needed to move based on the roughness of the new home, the distance to this new home and the differene in altitude between the current home and the new home. Also lower the time based on mobility.
  let time_needed_to_move max list 1 (((distance new_home + ([ruggedness_index] of new_home / 10) + abs (([altitude] of new_home - [altitude] of current_home_location) / 100))) - mobility)
  ;print sentence "time_needed_to_move: " time_needed_to_move

  if time_needed_to_move < max_move_time [

    set time_spent time_spent + time_needed_to_move
    set time_spent_moving time_needed_to_move
    set total_movement total_movement + time_spent_moving ; count the total time which is spent on moving
                                                          ;print sentence "time_spent_moving: " time_spent_moving

    set previous_home_location current_home_location

    let resources_moved min list group_size resources_owned
    let resources_dropped resources_owned - resources_moved
    set resources_owned resources_moved
    ask previous_home_location [
      set resources_available resources_available + resources_dropped
    ]

    move-to new_home
    set current_home_location new_home
    ;delete current knowledge on this patch in the current season
    set known_locations_current filter [x -> item 0 x != patch-here] known_locations_current
    ;add the new knowledge on this patch in the current season
    set known_locations_current lput (list new_home [food_available] of new_home [resources_available] of new_home) known_locations_current ]

end

to explore
  ;Exploring takes time depending on mobility
  let time_spent_explore 11 - mobility
  set time_spent time_spent + time_spent_explore
  set time_spent_exploring time_spent_explore
  ;print sentence "time_spent_exploring: " time_spent_exploring

  let list_of_explored_patches []
  ;Add the explored patches to the known patches
  ask patches in-radius round (mobility / 2 + 1) [
    set list_of_explored_patches lput (list self [food_available] of self [resources_available] of self) list_of_explored_patches
  ]
  let x 0

  while [x < length list_of_explored_patches][
    let current_location item x list_of_explored_patches
    set known_locations_current filter [y -> item 0 y != item 0 current_location] known_locations_current
    set x x + 1
  ]
  foreach list_of_explored_patches [y -> if length y = 3
    [set known_locations_current lput y known_locations_current]
  ]
  ;decide which known location is the best possible to move to (even though it will not reach the needs) and move there
  let best_known_locations []
  ifelse resources_needed > 0[
    foreach known_locations_current [y -> set best_known_locations lput (list item 0 y (min list 1 ((item 1 y / food_needed)) + (min list 1 (item 2 y / resources_needed))))  best_known_locations
    ]
  ]
  [foreach known_locations_current [y -> set best_known_locations lput (list item 0 y (min list 1 ((item 1 y / food_needed)) + 1))  best_known_locations
    ]
  ]
  ;Only travel to the new location if there is time to do so
  set known_locations_current filter [y -> (([distance self] of item 0 y + ([ruggedness_index] of item 0 y / 10) + abs (([altitude] of item 0 y - [altitude] of current_home_location) / 100)) - mobility) < max_move_time] known_locations_current
  ;Choose the best option based on where the biggest part of the food and resources can still be gathered
  let current_max_patch item 0 item 0 best_known_locations
  let current_max item 1 item 0 best_known_locations
  foreach best_known_locations [y -> if item 1 y > current_max[
    set current_max_patch item 0 y
    set current_max item 1 y
    ]
  ]

  ;print sentence "Best KNown Locations: " best_known_locations
  ;print sentence "Current Max Patch: " current_max_patch

  if current_max_patch != current_home_location [
    move current_max_patch ]
end


to use_gathered_products
  ask bands[
    ;Change population growth
    let shortage_food ((food_needed - food_owned) / food_needed)
    ;print sentence "shortage_food: " shortage_food
    ;print sentence "food_owned: " food_owned
    let shortage_resources 0
    if resources_needed > 0[
      set shortage_resources max list 0 ((resources_needed - resources_owned) / resources_needed)
    ]
    let shortage_total (shortage_food + shortage_resources) / 2
    ;print sentence "shortage_total: " shortage_total

    set health max list 0 (health - (100 * shortage_total))
    if shortage_total <= 0 [
      set health 100
      set death_rate 1
    ]
    set food_owned 0
    set resources_owned max list 0 (resources_owned - resources_needed)
    ;people die before new ones are born

    if health < 100 [
      set death_rate (health / 100)
      set group_size group_size * death_rate
    ]
    if group_size < 1[
      set extinct_bands extinct_bands + 1
      die
    ]
    set group_size ceiling (group_size * standard_birth_rate)

    ifelse cultural_capital > technology_level [
      let potential_increase_technology_level_resources floor (resources_owned / (resources_tool * group_size))
      let potential_increase_technology_level_cutural_capital floor (cultural_capital - technology_level)

      let increase_technology_level min list potential_increase_technology_level_resources potential_increase_technology_level_cutural_capital

      set technology_level technology_level + increase_technology_level
      set resources_owned resources_owned - (increase_technology_level * resources_tool * group_size) ]
    [
      set technology_level floor (cultural_capital)
    ]
    set effectiveness max_effectiveness * (technology_level / 100)
  ]
end

to split_bands
    ask bands [

    if group_size > merge_max_size and (group_size / 2) > split_min_size[
      set group_size round (group_size / 2)
      hatch 1
    ]
    set count_known_locations_current length known_locations_current ]
end